# ==============================================================================
# DATA_BOT API Service - Optimized Multi-stage Dockerfile
# ==============================================================================

# Base image avec Python 3.11 et Ubuntu pour meilleure compatibilité Playwright ARM64
FROM python:3.11-bullseye as base

# Métadonnées
LABEL maintainer="DATA_BOT Team"
LABEL version="4.0"
LABEL description="DATA_BOT API Service - Enterprise Archiving Platform"

# Variables d'environnement de sécurité
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    PIP_ROOT_USER_ACTION=ignore

# ==============================================================================
# Stage 1: Builder - Installation des dépendances et compilation
# ==============================================================================
FROM base as builder

# Installation des dépendances système pour compilation
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    libffi-dev \
    libssl-dev \
    libpq-dev \
    python3-dev \
    git \
    curl \
    build-essential \
    # Mise à jour SQLite pour ChromaDB (>= 3.35.0)
    wget \
    # Dépendances pour Playwright ARM64
    libnss3 \
    libnspr4 \
    libatk-bridge2.0-0 \
    libdrm2 \
    libxkbcommon0 \
    libxcomposite1 \
    libxdamage1 \
    libxrandr2 \
    libgbm1 \
    libxss1 \
    libasound2 \
    libatspi2.0-0 \
    libgtk-3-0 \
    && rm -rf /var/lib/apt/lists/*

# Installation de SQLite 3.40+ pour compatibilité ChromaDB
RUN wget -O sqlite-autoconf.tar.gz "https://sqlite.org/2023/sqlite-autoconf-3430000.tar.gz" && \
    tar xzf sqlite-autoconf.tar.gz && \
    cd sqlite-autoconf-3430000 && \
    ./configure --prefix=/usr && \
    make && \
    make install && \
    cd .. && \
    rm -rf sqlite-autoconf* && \
    ldconfig

# Création de l'utilisateur non-root dès le build
RUN useradd -m -u 1000 databot

# Répertoire de travail
WORKDIR /app

# Copie des fichiers de requirements uniquement pour optimiser le cache Docker
COPY requirements.txt requirements_v3.txt requirements_v4.txt ./

# Installation des dépendances Python avec wheel pour optimiser
RUN pip install --upgrade pip setuptools wheel && \
    pip install --user --no-cache-dir -r requirements.txt && \
    pip install --user --no-cache-dir -r requirements_v3.txt && \
    pip install --user --no-cache-dir -r requirements_v4.txt

# Installation de Playwright pour screenshots avec optimisations
# Skip playwright installation if already installed from requirements
RUN python -m playwright install-deps && \
    python -m playwright install chromium --with-deps

# ==============================================================================
# Stage 2: Runtime - Image finale optimisée
# ==============================================================================
FROM base as runtime

# Installation des dépendances runtime uniquement
RUN apt-get update && apt-get install -y \
    libpq5 \
    curl \
    ca-certificates \
    sqlite3 \
    libsqlite3-0 \
    wget \
    && rm -rf /var/lib/apt/lists/*

# Installation de SQLite 3.40+ pour compatibility ChromaDB (même version que le builder)
RUN wget -O sqlite-autoconf.tar.gz "https://sqlite.org/2023/sqlite-autoconf-3430000.tar.gz" && \
    tar xzf sqlite-autoconf.tar.gz && \
    cd sqlite-autoconf-3430000 && \
    ./configure --prefix=/usr && \
    make && \
    make install && \
    cd .. && \
    rm -rf sqlite-autoconf* && \
    ldconfig

# Création de l'utilisateur non-root
RUN useradd -m -u 1000 databot

# Copie des dépendances Python depuis le builder
COPY --from=builder --chown=databot:databot /root/.local /home/databot/.local

# Répertoire de travail
WORKDIR /app

# Copie du code source avec permissions correctes
COPY --chown=databot:databot . .

# Création des répertoires nécessaires avec permissions
RUN mkdir -p /app/data /app/logs /app/archive /app/screenshots /app/config && \
    chown -R databot:databot /app

# Configuration de l'environnement utilisateur
ENV PATH=/home/databot/.local/bin:$PATH
ENV PLAYWRIGHT_BROWSERS_PATH=/home/databot/.local/share/ms-playwright

# Basculer vers utilisateur non-root
USER databot

# Ports exposés
EXPOSE 8080 8081 8082 8083

# Health check détaillé
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# Configuration de sécurité runtime
ENV PYTHONPATH=/app \
    ENVIRONMENT=production \
    LOG_LEVEL=INFO

# Point d'entrée par défaut
CMD ["python", "main_v4.py", "--mode", "server"]