# ==============================================================================
# DATA_BOT Blockchain Service - Optimized Dockerfile for ArchiveChain
# ==============================================================================

# Base image pour les dépendances
FROM python:3.11-slim as base

# Métadonnées
LABEL maintainer="DATA_BOT Team"
LABEL version="4.0"
LABEL description="ArchiveChain Blockchain Node - Proof of Archive Consensus"

# Variables d'environnement de sécurité
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# ==============================================================================
# Stage 1: Builder - Installation des dépendances et compilation
# ==============================================================================
FROM base as builder

# Installation des dépendances système
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    libffi-dev \
    libssl-dev \
    python3-dev \
    cargo \
    rustc \
    git \
    build-essential \
    openssl \
    ca-certificates \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Création de l'utilisateur blockchain pour le build
RUN useradd -m -u 1000 blockchain

WORKDIR /app

# Copie des requirements spécifiques blockchain
COPY requirements_blockchain.txt ./requirements.txt
COPY requirements_v3.txt ./requirements_v3.txt
COPY requirements.txt ./requirements_main.txt

# Installation des dépendances Python + cryptographie avancée
RUN pip install --upgrade pip setuptools wheel && \
    pip install --user --no-cache-dir -r requirements.txt && \
    pip install --user --no-cache-dir -r requirements_v3.txt && \
    pip install --user --no-cache-dir -r requirements_main.txt && \
    pip install --user --no-cache-dir \
    cryptography==41.0.7 \
    ecdsa==0.18.0 \
    pycryptodome==3.19.0 \
    fastapi==0.104.1 \
    uvicorn[standard]==0.24.0 && \
    python -c "import fastapi; print('FastAPI installed successfully')"

# ==============================================================================
# Stage 2: Runtime - Image finale optimisée
# ==============================================================================
FROM base as runtime

# Installation des dépendances runtime uniquement
RUN apt-get update && apt-get install -y \
    openssl \
    ca-certificates \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Création de l'utilisateur blockchain
RUN useradd -m -u 1000 blockchain

# Copie des dépendances Python depuis le builder
COPY --from=builder --chown=blockchain:blockchain /root/.local /home/blockchain/.local

WORKDIR /app

# Copie du code blockchain et des dépendances nécessaires
COPY --chown=blockchain:blockchain src/ ./src/
COPY --chown=blockchain:blockchain main_v4.py ./
COPY --chown=blockchain:blockchain main_v3.py ./
COPY --chown=blockchain:blockchain main_v2.py ./
COPY --chown=blockchain:blockchain main.py ./
COPY --chown=blockchain:blockchain tools.py ./

# Création des répertoires blockchain
RUN mkdir -p /app/data/blockchain /app/logs /app/config && \
    chown -R blockchain:blockchain /app

# Configuration de l'environnement
ENV PATH=/home/blockchain/.local/bin:$PATH \
    PYTHONPATH=/app \
    BLOCKCHAIN_ENABLED=true \
    NODE_TYPE=full_archive \
    ENVIRONMENT=production

# Vérification finale que FastAPI est disponible
RUN PYTHONPATH=/home/blockchain/.local/lib/python3.11/site-packages python -c "import fastapi; print('FastAPI available - final check')"

# Basculer vers utilisateur non-root
USER blockchain

# Port blockchain (8334 par défaut)
EXPOSE 8334

# Health check spécialisé blockchain
HEALTHCHECK --interval=30s --timeout=10s --start-period=90s --retries=3 \
    CMD python -c "import sys; sys.path.append('/app'); exit(0)"

# Point d'entrée blockchain
CMD ["python", "main_v4.py", "--mode", "server", "--enable-blockchain"]