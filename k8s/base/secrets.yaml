# NOTE: Ce fichier contient des placeholders pour les secrets.
# En production, utilisez des gestionnaires de secrets comme:
# - Kubernetes External Secrets Operator
# - HashiCorp Vault
# - AWS Secrets Manager
# - Azure Key Vault
# - Google Secret Manager

apiVersion: v1
kind: Secret
metadata:
  name: databot-credentials
  namespace: databot-v4
  labels:
    app.kubernetes.io/name: databot
    app.kubernetes.io/component: credentials
    app.kubernetes.io/version: v4
  annotations:
    # Annotations pour l'intégration avec les gestionnaires de secrets
    secrets-store.csi.x-k8s.io/used: "true"
    vault.hashicorp.com/agent-inject: "true"
    vault.hashicorp.com/role: "databot-role"
type: Opaque
data:
  # IMPORTANT: Ces valeurs doivent être remplacées par des références
  # à un gestionnaire de secrets en production
  
  # Base de données PostgreSQL
  POSTGRES_PASSWORD: ZGF0YWJvdF9wYXNzd29yZF9zZWN1cmU=  # Placeholder - À remplacer
  
  # Redis
  REDIS_PASSWORD: cmVkaXNfcGFzc3dvcmRfc2VjdXJl  # Placeholder - À remplacer
  
  # Clés de chiffrement pour la blockchain
  BLOCKCHAIN_PRIVATE_KEY: YmxvY2tjaGFpbl9wcml2YXRlX2tleV9zZWN1cmU=  # Placeholder - À remplacer
  BLOCKCHAIN_ENCRYPTION_KEY: YmxvY2tjaGFpbl9lbmNyeXB0aW9uX2tleV9zZWN1cmU=  # Placeholder - À remplacer
  
  # JWT et API keys
  JWT_SECRET_KEY: and0X3NlY3JldF9rZXlfc2VjdXJl  # Placeholder - À remplacer
  API_SECRET_KEY: YXBpX3NlY3JldF9rZXlfc2VjdXJl  # Placeholder - À remplacer
  
  # Clés pour les services externes
  OLLAMA_API_KEY: b2xsYW1hX2FwaV9rZXlfc2VjdXJl  # Placeholder - À remplacer
  
  # Monitoring
  GRAFANA_ADMIN_PASSWORD: Z3JhZmFuYV9hZG1pbl9wYXNzd29yZF9zZWN1cmU=  # Placeholder - À remplacer
  PROMETHEUS_AUTH_TOKEN: cHJvbWV0aGV1c19hdXRoX3Rva2VuX3NlY3VyZQ==  # Placeholder - À remplacer

---
apiVersion: v1
kind: Secret
metadata:
  name: tls-certificate
  namespace: databot-v4
  labels:
    app.kubernetes.io/name: databot
    app.kubernetes.io/component: tls
    app.kubernetes.io/version: v4
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
type: kubernetes.io/tls
data:
  # Ces certificats doivent être générés par cert-manager ou fournis
  # Placeholder - À remplacer par de vrais certificats TLS
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0t  # Placeholder
  tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0t  # Placeholder

---
apiVersion: v1
kind: Secret
metadata:
  name: docker-registry
  namespace: databot-v4
  labels:
    app.kubernetes.io/name: databot
    app.kubernetes.io/component: registry
type: kubernetes.io/dockerconfigjson
data:
  # Configuration pour l'accès aux registres Docker privés
  .dockerconfigjson: eyJhdXRocyI6eyJyZWdpc3RyeS5leGFtcGxlLmNvbSI6eyJ1c2VybmFtZSI6InVzZXIiLCJwYXNzd29yZCI6InBhc3MiLCJhdXRoIjoiZFhObGNqcHdZWE56In19fQ==  # Placeholder

---
# External Secrets Operator - Exemple de configuration pour HashiCorp Vault
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: vault-backend
  namespace: databot-v4
spec:
  provider:
    vault:
      server: "https://vault.example.com"
      path: "secret"
      version: "v2"
      auth:
        kubernetes:
          mountPath: "kubernetes"
          role: "databot-role"
          serviceAccountRef:
            name: "vault-auth"

---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: databot-external-secrets
  namespace: databot-v4
spec:
  refreshInterval: 60s
  secretStoreRef:
    name: vault-backend
    kind: SecretStore
  target:
    name: databot-vault-secrets
    creationPolicy: Owner
  data:
  - secretKey: postgres-password
    remoteRef:
      key: databot/database
      property: postgres_password
  - secretKey: redis-password
    remoteRef:
      key: databot/cache
      property: redis_password
  - secretKey: jwt-secret
    remoteRef:
      key: databot/auth
      property: jwt_secret
  - secretKey: blockchain-private-key
    remoteRef:
      key: databot/blockchain
      property: private_key
  - secretKey: api-secret-key
    remoteRef:
      key: databot/api
      property: secret_key

---
# ServiceAccount pour l'authentification Vault
apiVersion: v1
kind: ServiceAccount
metadata:
  name: vault-auth
  namespace: databot-v4
  labels:
    app.kubernetes.io/name: databot
    app.kubernetes.io/component: auth
automountServiceAccountToken: true

---
# ClusterRoleBinding pour l'accès aux secrets
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: vault-auth-delegator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
- kind: ServiceAccount
  name: vault-auth
  namespace: databot-v4